// server/routes/addressRoutes.js

const express = require('express');
const router = express.Router();

// Test route
router.get('/test', (req, res) => {
  res.json({ message: 'Address routes working!' });
});

// D·ªØ li·ªáu ƒë·ªãa ch·ªâ Vi·ªát Nam (c√≥ th·ªÉ l∆∞u trong database ho·∫∑c file JSON)
const vietnamAddresses = {
  provinces: [
    { id: 'HN', name: 'H√† N·ªôi', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { id: 'HCM', name: 'H·ªì Ch√≠ Minh', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { id: 'DN', name: 'ƒê√† N·∫µng', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { id: 'HP', name: 'H·∫£i Ph√≤ng', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { id: 'CT', name: 'C·∫ßn Th∆°', type: 'Th√†nh ph·ªë Trung ∆∞∆°ng' },
    { id: 'AG', name: 'An Giang', type: 'T·ªânh' },
    { id: 'BR', name: 'B√† R·ªãa - V≈©ng T√†u', type: 'T·ªânh' },
    { id: 'BL', name: 'B·∫°c Li√™u', type: 'T·ªânh' },
    { id: 'BK', name: 'B·∫Øc K·∫°n', type: 'T·ªânh' },
    { id: 'BG', name: 'B·∫Øc Giang', type: 'T·ªânh' },
    { id: 'BN', name: 'B·∫Øc Ninh', type: 'T·ªânh' },
    { id: 'BT', name: 'B·∫øn Tre', type: 'T·ªânh' },
    { id: 'BD', name: 'B√¨nh ƒê·ªãnh', type: 'T·ªânh' },
    { id: 'BP', name: 'B√¨nh Ph∆∞·ªõc', type: 'T·ªânh' },
    { id: 'BU', name: 'B√¨nh Thu·∫≠n', type: 'T·ªânh' },
    { id: 'CM', name: 'C√† Mau', type: 'T·ªânh' },
    { id: 'CB', name: 'Cao B·∫±ng', type: 'T·ªânh' },
    { id: 'DL', name: 'ƒê·∫Øk L·∫Øk', type: 'T·ªânh' },
    { id: 'DG', name: 'ƒê·∫Øk N√¥ng', type: 'T·ªânh' },
    { id: 'DB', name: 'ƒêi·ªán Bi√™n', type: 'T·ªânh' },
    { id: 'DT', name: 'ƒê·ªìng Th√°p', type: 'T·ªânh' },
    { id: 'GL', name: 'Gia Lai', type: 'T·ªânh' },
    { id: 'HG', name: 'H√† Giang', type: 'T·ªânh' },
    { id: 'HNam', name: 'H√† Nam', type: 'T·ªânh' },
    { id: 'HT', name: 'H√† Tƒ©nh', type: 'T·ªânh' },
    { id: 'HD', name: 'H·∫£i D∆∞∆°ng', type: 'T·ªânh' },
    { id: 'HU', name: 'Th·ª´a Thi√™n Hu·∫ø', type: 'T·ªânh' },
    { id: 'HB', name: 'H√≤a B√¨nh', type: 'T·ªânh' },
    { id: 'HY', name: 'H∆∞ng Y√™n', type: 'T·ªânh' },
    { id: 'KH', name: 'Kh√°nh H√≤a', type: 'T·ªânh' },
    { id: 'KG', name: 'Ki√™n Giang', type: 'T·ªânh' },
    { id: 'KT', name: 'Kon Tum', type: 'T·ªânh' },
    { id: 'LC', name: 'Lai Ch√¢u', type: 'T·ªânh' },
    { id: 'LD', name: 'L√¢m ƒê·ªìng', type: 'T·ªânh' },
    { id: 'LS', name: 'L·∫°ng S∆°n', type: 'T·ªânh' },
    { id: 'LO', name: 'L√†o Cai', type: 'T·ªânh' },
    { id: 'LA', name: 'Long An', type: 'T·ªânh' },
    { id: 'ND', name: 'Nam ƒê·ªãnh', type: 'T·ªânh' },
    { id: 'NA', name: 'Ngh·ªá An', type: 'T·ªânh' },
    { id: 'NB', name: 'Ninh B√¨nh', type: 'T·ªânh' },
    { id: 'NT', name: 'Ninh Thu·∫≠n', type: 'T·ªânh' },
    { id: 'PY', name: 'Ph√∫ Y√™n', type: 'T·ªânh' },
    { id: 'QB', name: 'Qu·∫£ng B√¨nh', type: 'T·ªânh' },
    { id: 'QN', name: 'Qu·∫£ng Nam', type: 'T·ªânh' },
    { id: 'QG', name: 'Qu·∫£ng Ng√£i', type: 'T·ªânh' },
    { id: 'QNi', name: 'Qu·∫£ng Ninh', type: 'T·ªânh' },
    { id: 'QT', name: 'Qu·∫£ng Tr·ªã', type: 'T·ªânh' },
    { id: 'ST', name: 'S√≥c TrƒÉng', type: 'T·ªânh' },
    { id: 'SL', name: 'S∆°n La', type: 'T·ªânh' },
    { id: 'TN', name: 'T√¢y Ninh', type: 'T·ªânh' },
    { id: 'TB', name: 'Th√°i B√¨nh', type: 'T·ªânh' },
    { id: 'TG', name: 'Ti·ªÅn Giang', type: 'T·ªânh' },
    { id: 'TV', name: 'Tr√† Vinh', type: 'T·ªânh' },
    { id: 'TQ', name: 'Tuy√™n Quang', type: 'T·ªânh' },
    { id: 'VL', name: 'Vƒ©nh Long', type: 'T·ªânh' },
    { id: 'VP', name: 'Vƒ©nh Ph√∫c', type: 'T·ªânh' },
    { id: 'YB', name: 'Y√™n B√°i', type: 'T·ªânh' }
  ],
  districts: {
    'HN': [
      { id: 'BA_DINH', name: 'Ba ƒê√¨nh', type: 'Qu·∫≠n' },
      { id: 'HOAN_KIEM', name: 'Ho√†n Ki·∫øm', type: 'Qu·∫≠n' },
      { id: 'TAY_HO', name: 'T√¢y H·ªì', type: 'Qu·∫≠n' },
      { id: 'LONG_BIEN', name: 'Long Bi√™n', type: 'Qu·∫≠n' },
      { id: 'CAU_GIAY', name: 'C·∫ßu Gi·∫•y', type: 'Qu·∫≠n' },
      { id: 'DONG_DA', name: 'ƒê·ªëng ƒêa', type: 'Qu·∫≠n' },
      { id: 'HAI_BA_TRUNG', name: 'Hai B√† Tr∆∞ng', type: 'Qu·∫≠n' },
      { id: 'HOANG_MAI', name: 'Ho√†ng Mai', type: 'Qu·∫≠n' },
      { id: 'THANH_XUAN', name: 'Thanh Xu√¢n', type: 'Qu·∫≠n' },
      { id: 'SOC_SON', name: 'S√≥c S∆°n', type: 'Huy·ªán' },
      { id: 'DONG_ANH', name: 'ƒê√¥ng Anh', type: 'Huy·ªán' },
      { id: 'GIA_LAM', name: 'Gia L√¢m', type: 'Huy·ªán' },
      { id: 'NAM_TU_LIEM', name: 'Nam T·ª´ Li√™m', type: 'Qu·∫≠n' },
      { id: 'BAC_TU_LIEM', name: 'B·∫Øc T·ª´ Li√™m', type: 'Qu·∫≠n' },
      { id: 'ME_LINH', name: 'M√™ Linh', type: 'Huy·ªán' },
      { id: 'HA_DONG', name: 'H√† ƒê√¥ng', type: 'Qu·∫≠n' }
    ],
    'HCM': [
      { id: 'QUAN_1', name: 'Qu·∫≠n 1', type: 'Qu·∫≠n' },
      { id: 'QUAN_2', name: 'Qu·∫≠n 2', type: 'Qu·∫≠n' },
      { id: 'QUAN_3', name: 'Qu·∫≠n 3', type: 'Qu·∫≠n' },
      { id: 'QUAN_4', name: 'Qu·∫≠n 4', type: 'Qu·∫≠n' },
      { id: 'QUAN_5', name: 'Qu·∫≠n 5', type: 'Qu·∫≠n' },
      { id: 'QUAN_6', name: 'Qu·∫≠n 6', type: 'Qu·∫≠n' },
      { id: 'QUAN_7', name: 'Qu·∫≠n 7', type: 'Qu·∫≠n' },
      { id: 'QUAN_8', name: 'Qu·∫≠n 8', type: 'Qu·∫≠n' },
      { id: 'QUAN_9', name: 'Qu·∫≠n 9', type: 'Qu·∫≠n' },
      { id: 'QUAN_10', name: 'Qu·∫≠n 10', type: 'Qu·∫≠n' },
      { id: 'QUAN_11', name: 'Qu·∫≠n 11', type: 'Qu·∫≠n' },
      { id: 'QUAN_12', name: 'Qu·∫≠n 12', type: 'Qu·∫≠n' },
      { id: 'THU_DUC', name: 'Th·ªß ƒê·ª©c', type: 'Th√†nh ph·ªë' },
      { id: 'BINH_THANH', name: 'B√¨nh Th·∫°nh', type: 'Qu·∫≠n' },
      { id: 'GO_VAP', name: 'G√≤ V·∫•p', type: 'Qu·∫≠n' },
      { id: 'PHU_NHUAN', name: 'Ph√∫ Nhu·∫≠n', type: 'Qu·∫≠n' },
      { id: 'TAN_BINH', name: 'T√¢n B√¨nh', type: 'Qu·∫≠n' },
      { id: 'TAN_PHU', name: 'T√¢n Ph√∫', type: 'Qu·∫≠n' },
      { id: 'BINH_TAN', name: 'B√¨nh T√¢n', type: 'Qu·∫≠n' },
      { id: 'CU_CHI', name: 'C·ªß Chi', type: 'Huy·ªán' },
      { id: 'HOC_MON', name: 'H√≥c M√¥n', type: 'Huy·ªán' },
      { id: 'BINH_CHANH', name: 'B√¨nh Ch√°nh', type: 'Huy·ªán' },
      { id: 'NHA_BE', name: 'Nh√† B√®', type: 'Huy·ªán' },
      { id: 'CAN_GIO', name: 'C·∫ßn Gi·ªù', type: 'Huy·ªán' }
    ]
  }
};

/**
 * @route   GET /api/addresses/provinces
 * @desc    L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
 * @access  Public
 */
router.get('/provinces', async (req, res) => {
  try {
    const { search } = req.query;
    
    let provinces = vietnamAddresses.provinces;
    
    // T√¨m ki·∫øm theo t√™n n·∫øu c√≥
    if (search) {
      const searchTerm = search.toLowerCase().trim();
      provinces = provinces.filter(province => 
        province.name.toLowerCase().includes(searchTerm)
      );
    }
    
    res.status(200).json({
      success: true,
      data: provinces,
      total: provinces.length
    });
  } catch (error) {
    console.error('Error fetching provinces:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë'
    });
  }
});

/**
 * @route   GET /api/addresses/districts/:provinceId
 * @desc    L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh/th√†nh ph·ªë
 * @access  Public
 */
router.get('/districts/:provinceId', async (req, res) => {
  try {
    const { provinceId } = req.params;
    const { search } = req.query;
    
    let districts = vietnamAddresses.districts[provinceId] || [];
    
    // T√¨m ki·∫øm theo t√™n n·∫øu c√≥
    if (search) {
      const searchTerm = search.toLowerCase().trim();
      districts = districts.filter(district => 
        district.name.toLowerCase().includes(searchTerm)
      );
    }
    
    res.status(200).json({
      success: true,
      data: districts,
      total: districts.length,
      provinceId
    });
  } catch (error) {
    console.error('Error fetching districts:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch qu·∫≠n/huy·ªán'
    });
  }
});

/**
 * @route   GET /api/addresses/search
 * @desc    T√¨m ki·∫øm ƒë·ªãa ch·ªâ t·ªïng h·ª£p
 * @access  Public
 */
router.get('/search', async (req, res) => {
  try {
    const { q, limit = 10 } = req.query;
    
    if (!q || q.trim().length < 2) {
      return res.status(400).json({
        success: false,
        message: 'T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±'
      });
    }
    
    const searchTerm = q.toLowerCase().trim();
    const results = [];
    
    // T√¨m ki·∫øm trong t·ªânh/th√†nh ph·ªë
    vietnamAddresses.provinces.forEach(province => {
      if (province.name.toLowerCase().includes(searchTerm)) {
        results.push({
          id: `province_${province.id}`,
          name: province.name,
          fullName: `${province.type} ${province.name}`,
          type: 'province',
          level: 1,
          icon: 'üèõÔ∏è',
          relevance: province.name.toLowerCase().indexOf(searchTerm) === 0 ? 1 : 0.8
        });
      }
      
      // T√¨m ki·∫øm trong qu·∫≠n/huy·ªán c·ªßa t·ªânh n√†y
      const districts = vietnamAddresses.districts[province.id] || [];
      districts.forEach(district => {
        if (district.name.toLowerCase().includes(searchTerm)) {
          results.push({
            id: `district_${province.id}_${district.id}`,
            name: district.name,
            fullName: `${district.type} ${district.name}, ${province.type} ${province.name}`,
            type: 'district',
            level: 2,
            icon: 'üè¢',
            province: province,
            relevance: district.name.toLowerCase().indexOf(searchTerm) === 0 ? 0.9 : 0.7
          });
        }
      });
    });
    
    // S·∫Øp x·∫øp theo ƒë·ªô li√™n quan v√† gi·ªõi h·∫°n k·∫øt qu·∫£
    const sortedResults = results
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, parseInt(limit));
    
    res.status(200).json({
      success: true,
      data: sortedResults,
      total: sortedResults.length,
      query: q
    });
  } catch (error) {
    console.error('Error searching addresses:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ'
    });
  }
});

/**
 * @route   GET /api/addresses/suggestions
 * @desc    L·∫•y g·ª£i √Ω ƒë·ªãa ch·ªâ ph·ªï bi·∫øn
 * @access  Public
 */
router.get('/suggestions', async (req, res) => {
  try {
    const popularAddresses = [
      {
        id: 'hcm_q1',
        name: 'Qu·∫≠n 1',
        fullName: 'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        type: 'district',
        icon: 'üè¢',
        popular: true
      },
      {
        id: 'hn_hoankiem',
        name: 'Ho√†n Ki·∫øm',
        fullName: 'Qu·∫≠n Ho√†n Ki·∫øm, Th√†nh ph·ªë H√† N·ªôi',
        type: 'district',
        icon: 'üè¢',
        popular: true
      },
      {
        id: 'hcm_q3',
        name: 'Qu·∫≠n 3',
        fullName: 'Qu·∫≠n 3, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        type: 'district',
        icon: 'üè¢',
        popular: true
      },
      {
        id: 'hn_caugiay',
        name: 'C·∫ßu Gi·∫•y',
        fullName: 'Qu·∫≠n C·∫ßu Gi·∫•y, Th√†nh ph·ªë H√† N·ªôi',
        type: 'district',
        icon: 'üè¢',
        popular: true
      },
      {
        id: 'dn_haichau',
        name: 'H·∫£i Ch√¢u',
        fullName: 'Qu·∫≠n H·∫£i Ch√¢u, Th√†nh ph·ªë ƒê√† N·∫µng',
        type: 'district',
        icon: 'üè¢',
        popular: true
      }
    ];
    
    res.status(200).json({
      success: true,
      data: popularAddresses,
      total: popularAddresses.length
    });
  } catch (error) {
    console.error('Error fetching address suggestions:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y g·ª£i √Ω ƒë·ªãa ch·ªâ'
    });
  }
});

module.exports = router;
