// server/middleware/storageMiddleware.js
const { storage } = require('../config/firebaseAdmin');

/**
 * Middleware ƒë·ªÉ ki·ªÉm tra v√† kh·ªüi t·∫°o storage bucket
 */
const ensureStorageBucket = async (req, res, next) => {
  try {
    console.log('üîç [STORAGE MIDDLEWARE] Checking storage bucket availability...');
    
    // Ch·ªâ s·ª≠ d·ª•ng bucket default c·ªßa Firebase
    const defaultBucket = `${process.env.FIREBASE_PROJECT_ID}.appspot.com`;
    
    try {
      const bucket = storage.bucket(defaultBucket);
      
      console.log(`‚úÖ [STORAGE MIDDLEWARE] Using default Firebase bucket: ${defaultBucket}`);
      
      // L∆∞u bucket name v√†o request ƒë·ªÉ s·ª≠ d·ª•ng trong route handler
      req.workingBucket = defaultBucket;
      next();
      
    } catch (error) {
      console.error('‚ùå [STORAGE MIDDLEWARE] Default bucket not accessible:', error.message);
      
      // Fallback: bypass middleware v√† ƒë·ªÉ upload route t·ª± handle
      console.log('‚ö†Ô∏è [STORAGE MIDDLEWARE] Bypassing bucket check, letting upload route handle...');
      req.workingBucket = defaultBucket; // V·∫´n set bucket name
      next();
    }

  } catch (error) {
    console.error('üí• [STORAGE MIDDLEWARE] Critical error:', error);
    // Kh√¥ng block request, ƒë·ªÉ upload route t·ª± x·ª≠ l√Ω
    req.workingBucket = `${process.env.FIREBASE_PROJECT_ID}.appspot.com`;
    next();
  }
};

module.exports = { ensureStorageBucket };
