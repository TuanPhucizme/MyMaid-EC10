#!/usr/bin/env node

/**
 * Script test production build
 * S·ª≠ d·ª•ng: node scripts/test-production.js
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ MyMaid-EC10 Production Build Test');
console.log('=====================================\n');

// Ki·ªÉm tra build production
function testProductionBuild() {
  console.log('üî® Testing production build...');
  
  try {
    // Ki·ªÉm tra client build
    if (!fs.existsSync('client/build')) {
      console.log('‚ùå Client build kh√¥ng t·ªìn t·∫°i. Ch·∫°y build tr∆∞·ªõc:');
      console.log('   npm run build:production');
      return false;
    }
    
    console.log('‚úÖ Client build ƒë√£ t·ªìn t·∫°i');
    
    // Ki·ªÉm tra server dependencies
    if (!fs.existsSync('server/node_modules')) {
      console.log('‚ö†Ô∏è  Server dependencies ch∆∞a ƒë∆∞·ª£c install');
      console.log('   Ch·∫°y: npm run install:all');
      return false;
    }
    
    console.log('‚úÖ Server dependencies ƒë√£ ƒë∆∞·ª£c install');
    
    return true;
  } catch (error) {
    console.log('‚ùå L·ªói khi ki·ªÉm tra build:', error.message);
    return false;
  }
}

// Test production server
function testProductionServer() {
  return new Promise((resolve) => {
    console.log('üöÄ Testing production server...');
    
    try {
      // Start production server
      const server = spawn('npm', ['run', 'start:production'], {
        stdio: 'pipe',
        shell: true
      });
      
      let serverStarted = false;
      let serverOutput = '';
      
      server.stdout.on('data', (data) => {
        const output = data.toString();
        serverOutput += output;
        console.log(`[SERVER] ${output.trim()}`);
        
        // Ki·ªÉm tra server ƒë√£ start
        if (output.includes('Server is running') || output.includes('listening')) {
          serverStarted = true;
          console.log('‚úÖ Server ƒë√£ start th√†nh c√¥ng');
        }
      });
      
      server.stderr.on('data', (data) => {
        console.log(`[SERVER ERROR] ${data.toString().trim()}`);
      });
      
      // Timeout sau 30 gi√¢y
      const timeout = setTimeout(() => {
        if (!serverStarted) {
          console.log('‚è∞ Timeout: Server kh√¥ng start trong 30 gi√¢y');
          server.kill();
          resolve(false);
        }
      }, 30000);
      
      // Ki·ªÉm tra health endpoint sau 10 gi√¢y
      setTimeout(() => {
        if (serverStarted) {
          testHealthEndpoint().then((healthOk) => {
            clearTimeout(timeout);
            server.kill();
            resolve(healthOk);
          });
        }
      }, 10000);
      
    } catch (error) {
      console.log('‚ùå L·ªói khi start server:', error.message);
      resolve(false);
    }
  });
}

// Test health endpoint
function testHealthEndpoint() {
  return new Promise((resolve) => {
    console.log('üè• Testing health endpoint...');
    
    try {
      // S·ª≠ d·ª•ng curl ho·∫∑c fetch ƒë·ªÉ test health endpoint
      const healthCheck = spawn('curl', ['http://localhost:5000/api/health'], {
        stdio: 'pipe',
        shell: true
      });
      
      let response = '';
      
      healthCheck.stdout.on('data', (data) => {
        response += data.toString();
      });
      
      healthCheck.on('close', (code) => {
        if (code === 0 && response.includes('"status":"OK"')) {
          console.log('‚úÖ Health endpoint ho·∫°t ƒë·ªông t·ªët');
          console.log('Response:', response.trim());
          resolve(true);
        } else {
          console.log('‚ùå Health endpoint kh√¥ng ho·∫°t ƒë·ªông');
          console.log('Response:', response.trim());
          resolve(false);
        }
      });
      
      healthCheck.on('error', (error) => {
        console.log('‚ùå L·ªói khi test health endpoint:', error.message);
        resolve(false);
      });
      
    } catch (error) {
      console.log('‚ùå L·ªói khi test health endpoint:', error.message);
      resolve(false);
    }
  });
}

// Test client build
function testClientBuild() {
  console.log('üåê Testing client build...');
  
  try {
    const buildPath = 'client/build';
    const requiredFiles = [
      'index.html',
      'static/js/main.js',
      'static/css/main.css'
    ];
    
    const missingFiles = [];
    
    requiredFiles.forEach(file => {
      const filePath = path.join(buildPath, file);
      if (fs.existsSync(filePath)) {
        console.log(`‚úÖ ${file}`);
      } else {
        console.log(`‚ùå ${file} - KH√îNG T√åM TH·∫§Y`);
        missingFiles.push(file);
      }
    });
    
    if (missingFiles.length > 0) {
      console.log(`\n‚ùå Thi·∫øu ${missingFiles.length} file(s) trong build`);
      return false;
    }
    
    // Ki·ªÉm tra file sizes
    const indexHtmlPath = path.join(buildPath, 'index.html');
    const indexHtmlStats = fs.statSync(indexHtmlPath);
    const indexHtmlSize = (indexHtmlStats.size / 1024).toFixed(2);
    
    console.log(`üìä index.html size: ${indexHtmlSize} KB`);
    
    if (indexHtmlSize < 1) {
      console.log('‚ö†Ô∏è  index.html qu√° nh·ªè, c√≥ th·ªÉ build b·ªã l·ªói');
      return false;
    }
    
    console.log('‚úÖ Client build test th√†nh c√¥ng\n');
    return true;
    
  } catch (error) {
    console.log('‚ùå L·ªói khi test client build:', error.message);
    return false;
  }
}

// Main function
async function main() {
  console.log('üîç B·∫Øt ƒë·∫ßu test production build...\n');
  
  // Test 1: Ki·ªÉm tra build
  if (!testProductionBuild()) {
    console.log('‚ùå Build test th·∫•t b·∫°i. S·ª≠a l·ªói tr∆∞·ªõc khi ti·∫øp t·ª•c.\n');
    process.exit(1);
  }
  
  // Test 2: Test client build
  if (!testClientBuild()) {
    console.log('‚ùå Client build test th·∫•t b·∫°i.\n');
    process.exit(1);
  }
  
  // Test 3: Test production server
  console.log('üîÑ B·∫Øt ƒë·∫ßu test production server...\n');
  const serverTestResult = await testProductionServer();
  
  if (serverTestResult) {
    console.log('\nüéâ T·∫§T C·∫¢ TESTS ƒê√É TH√ÄNH C√îNG!');
    console.log('‚úÖ Production build s·∫µn s√†ng deploy');
    console.log('‚úÖ Server ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
    console.log('‚úÖ Health endpoint ho·∫°t ƒë·ªông');
    console.log('\nüöÄ B·∫°n c√≥ th·ªÉ deploy l√™n Render!');
  } else {
    console.log('\n‚ùå M·ªòT S·ªê TESTS TH·∫§T B·∫†I');
    console.log('üîß Ki·ªÉm tra logs v√† s·ª≠a l·ªói tr∆∞·ªõc khi deploy');
    process.exit(1);
  }
}

// Run script
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
    process.exit(1);
  });
}

module.exports = {
  testProductionBuild,
  testProductionServer,
  testHealthEndpoint,
  testClientBuild
};
