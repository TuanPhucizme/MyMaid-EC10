import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Button from '../components/ui/Button';
import { Card } from '../components/ui/Card';
import Badge from '../components/ui/Badge';
import { useGSAP } from '../hooks/useGSAP';
import { useIntersectionObserver } from '../hooks/useIntersectionObserver';

const PricingPage = () => {
  const navigate = useNavigate();
  const [selectedDuration, setSelectedDuration] = useState('2h');
  const [selectedFrequency, setSelectedFrequency] = useState('one-time');

  const { ref: pageRef, hasIntersected } = useIntersectionObserver();
  
  const contentRef = useGSAP((gsap, element) => {
    if (hasIntersected) {
      gsap.fromTo('.pricing-content',
        { opacity: 0, y: 30 },
        { opacity: 1, y: 0, duration: 0.8, ease: "power2.out" }
      );
    }
  }, [hasIntersected]);

  const services = [
    {
      id: 'cleaning',
      name: 'D·ªçn d·∫πp nh√† c·ª≠a',
      icon: 'üè†',
      description: 'D·ªçn d·∫πp t·ªïng th·ªÉ nh√† c·ª≠a, v·ªá sinh c√°c khu v·ª±c chung',
      basePrice: 150000,
      features: [
        'D·ªçn d·∫πp ph√≤ng kh√°ch, ph√≤ng ng·ªß',
        'V·ªá sinh nh√† b·∫øp, ph√≤ng t·∫Øm',
        'Lau ch√πi c·ª≠a s·ªï, g∆∞∆°ng',
        'H√∫t b·ª•i, lau s√†n',
        'D·ªçn d·∫πp r√°c th·∫£i'
      ]
    },
    {
      id: 'laundry',
      name: 'Gi·∫∑t ·ªßi',
      icon: 'üëï',
      description: 'Gi·∫∑t ·ªßi qu·∫ßn √°o, chƒÉn m√†n, r√®m c·ª≠a',
      basePrice: 100000,
      features: [
        'Gi·∫∑t qu·∫ßn √°o th∆∞·ªùng',
        'Gi·∫∑t ƒë·ªì len, ƒë·ªì nh·∫°y c·∫£m',
        '·ª¶i ph·∫≥ng qu·∫ßn √°o',
        'G·∫•p x·∫øp g·ªçn g√†ng',
        'Ph√¢n lo·∫°i theo m√†u s·∫Øc'
      ]
    },
    {
      id: 'childcare',
      name: 'ChƒÉm s√≥c tr·∫ª em',
      icon: 'üë∂',
      description: 'ChƒÉm s√≥c, tr√¥ng nom tr·∫ª em t·∫°i nh√†',
      basePrice: 200000,
      features: [
        'Tr√¥ng nom tr·∫ª em',
        'Chu·∫©n b·ªã b·ªØa ƒÉn',
        'H·ªó tr·ª£ h·ªçc t·∫≠p',
        'Vui ch∆°i an to√†n',
        'B√°o c√°o t√¨nh h√¨nh'
      ]
    },
    {
      id: 'cooking',
      name: 'N·∫•u ƒÉn',
      icon: 'üç≥',
      description: 'N·∫•u c√°c b·ªØa ƒÉn ngon, ƒë·∫£m b·∫£o dinh d∆∞·ª°ng',
      basePrice: 180000,
      features: [
        'N·∫•u b·ªØa s√°ng, tr∆∞a, t·ªëi',
        'Chu·∫©n b·ªã nguy√™n li·ªáu',
        'ƒê·∫£m b·∫£o v·ªá sinh an to√†n',
        'Ph√π h·ª£p kh·∫©u v·ªã',
        'D·ªçn d·∫πp sau n·∫•u'
      ]
    },
    {
      id: 'elderly-care',
      name: 'ChƒÉm s√≥c ng∆∞·ªùi gi√†',
      icon: 'üë¥',
      description: 'ChƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi, h·ªó tr·ª£ sinh ho·∫°t',
      basePrice: 250000,
      features: [
        'H·ªó tr·ª£ sinh ho·∫°t h√†ng ng√†y',
        'Theo d√µi s·ª©c kh·ªèe',
        'Tr√≤ chuy·ªán, t√¢m s·ª±',
        'H·ªó tr·ª£ v·∫≠n ƒë·ªông',
        'B√°o c√°o gia ƒë√¨nh'
      ]
    },
    {
      id: 'deep-cleaning',
      name: 'V·ªá sinh chuy√™n s√¢u',
      icon: 'üßπ',
      description: 'V·ªá sinh s√¢u, l√†m s·∫°ch c√°c khu v·ª±c kh√≥ ti·∫øp c·∫≠n',
      basePrice: 300000,
      features: [
        'V·ªá sinh s√¢u to√†n b·ªô nh√†',
        'L√†m s·∫°ch khe k·∫Ω, g√≥c c·∫°nh',
        'V·ªá sinh m√°y l·∫°nh, qu·∫°t',
        'ƒê√°nh b√≥ng ƒë·ªì g·ªó',
        'Kh·ª≠ m√πi, di·ªát khu·∫©n'
      ]
    }
  ];

  const durations = [
    { id: '2h', name: '2 gi·ªù', multiplier: 1 },
    { id: '4h', name: '4 gi·ªù', multiplier: 1.8 },
    { id: '6h', name: '6 gi·ªù', multiplier: 2.5 },
    { id: '8h', name: '8 gi·ªù', multiplier: 3.2 }
  ];

  const frequencies = [
    { id: 'one-time', name: 'M·ªôt l·∫ßn', discount: 0 },
    { id: 'weekly', name: 'H√†ng tu·∫ßn', discount: 0.1 },
    { id: 'monthly', name: 'H√†ng th√°ng', discount: 0.2 }
  ];

  const calculatePrice = (service) => {
    const duration = durations.find(d => d.id === selectedDuration);
    const frequency = frequencies.find(f => f.id === selectedFrequency);
    
    const basePrice = service.basePrice;
    const durationPrice = basePrice * duration.multiplier;
    const discountedPrice = durationPrice * (1 - frequency.discount);
    
    return Math.round(discountedPrice);
  };

  const handleBooking = (serviceId) => {
    navigate('/booking', { 
      state: { 
        serviceType: serviceId,
        duration: selectedDuration,
        frequency: selectedFrequency
      }
    });
  };

  const handleConsultation = () => {
    navigate('/consultation');
  };

  return (
    <div ref={pageRef} className="min-h-screen bg-gradient-to-br from-primary-50 to-secondary-50 py-20">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div ref={contentRef} className="pricing-content">
          {/* Header */}
          <div className="text-center mb-16">
            <h1 className="text-4xl lg:text-5xl font-bold text-neutral-900 mb-6">
              B·∫£ng Gi√° D·ªãch V·ª•
            </h1>
            <p className="text-xl text-neutral-600 max-w-3xl mx-auto">
              B·∫£ng gi√° minh b·∫°ch, r√µ r√†ng cho t·∫•t c·∫£ d·ªãch v·ª•. Ch·ªçn g√≥i ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch c·ªßa b·∫°n.
            </p>
          </div>

          {/* Filters */}
          <div className="mb-12">
            <Card className="p-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-3">
                    Th·ªùi l∆∞·ª£ng d·ªãch v·ª•
                  </label>
                  <div className="flex flex-wrap gap-3">
                    {durations.map((duration) => (
                      <button
                        key={duration.id}
                        onClick={() => setSelectedDuration(duration.id)}
                        className={`px-4 py-2 rounded-lg border-2 transition-all ${
                          selectedDuration === duration.id
                            ? 'border-primary-600 bg-primary-50 text-primary-700'
                            : 'border-neutral-200 hover:border-primary-300'
                        }`}
                      >
                        {duration.name}
                      </button>
                    ))}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-neutral-700 mb-3">
                    T·∫ßn su·∫•t s·ª≠ d·ª•ng
                  </label>
                  <div className="flex flex-wrap gap-3">
                    {frequencies.map((frequency) => (
                      <button
                        key={frequency.id}
                        onClick={() => setSelectedFrequency(frequency.id)}
                        className={`px-4 py-2 rounded-lg border-2 transition-all ${
                          selectedFrequency === frequency.id
                            ? 'border-primary-600 bg-primary-50 text-primary-700'
                            : 'border-neutral-200 hover:border-primary-300'
                        }`}
                      >
                        {frequency.name}
                        {frequency.discount > 0 && (
                          <Badge className="ml-2" variant="success">
                            -{frequency.discount * 100}%
                          </Badge>
                        )}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </Card>
          </div>

          {/* Services Grid */}
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16">
            {services.map((service) => (
              <Card key={service.id} className="p-6 hover:shadow-lg transition-shadow">
                <div className="text-center mb-6">
                  <div className="text-4xl mb-3">{service.icon}</div>
                  <h3 className="text-xl font-bold text-neutral-900 mb-2">
                    {service.name}
                  </h3>
                  <p className="text-neutral-600 text-sm">
                    {service.description}
                  </p>
                </div>

                <div className="text-center mb-6">
                  <div className="text-3xl font-bold text-primary-600 mb-1">
                    {calculatePrice(service).toLocaleString()}ƒë
                  </div>
                  <div className="text-sm text-neutral-500">
                    /{durations.find(d => d.id === selectedDuration)?.name}
                  </div>
                  {frequencies.find(f => f.id === selectedFrequency)?.discount > 0 && (
                    <div className="text-xs text-green-600 mt-1">
                      Ti·∫øt ki·ªám {Math.round(service.basePrice * frequencies.find(f => f.id === selectedFrequency)?.discount).toLocaleString()}ƒë
                    </div>
                  )}
                </div>

                <div className="space-y-3 mb-6">
                  {service.features.map((feature, index) => (
                    <div key={index} className="flex items-center text-sm text-neutral-600">
                      <span className="text-green-500 mr-2">‚úì</span>
                      {feature}
                    </div>
                  ))}
                </div>

                <div className="space-y-3">
                  <Button 
                    className="w-full"
                    onClick={() => handleBooking(service.id)}
                  >
                    ƒê·∫∑t ngay
                  </Button>
                  <Button 
                    variant="outline" 
                    className="w-full"
                    onClick={handleConsultation}
                  >
                    T∆∞ v·∫•n th√™m
                  </Button>
                </div>
              </Card>
            ))}
          </div>

          {/* Pricing Table */}
          <div className="mb-16">
            <Card className="p-8">
              <h2 className="text-2xl font-bold text-neutral-900 mb-8 text-center">
                B·∫£ng Gi√° Chi Ti·∫øt
              </h2>
              
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b border-neutral-200">
                      <th className="text-left py-4 px-4 font-semibold text-neutral-900">D·ªãch v·ª•</th>
                      {durations.map(duration => (
                        <th key={duration.id} className="text-center py-4 px-4 font-semibold text-neutral-900">
                          {duration.name}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody>
                    {services.map((service) => (
                      <tr key={service.id} className="border-b border-neutral-100 hover:bg-neutral-50">
                        <td className="py-4 px-4">
                          <div className="flex items-center space-x-3">
                            <span className="text-2xl">{service.icon}</span>
                            <div>
                              <div className="font-medium text-neutral-900">{service.name}</div>
                              <div className="text-sm text-neutral-500">{service.description}</div>
                            </div>
                          </div>
                        </td>
                        {durations.map(duration => (
                          <td key={duration.id} className="text-center py-4 px-4">
                            <div className="font-semibold text-neutral-900">
                              {Math.round(service.basePrice * duration.multiplier).toLocaleString()}ƒë
                            </div>
                            <div className="text-sm text-neutral-500">
                              {Math.round(service.basePrice * duration.multiplier * 0.9).toLocaleString()}ƒë
                            </div>
                            <div className="text-xs text-green-600">(tu·∫ßn)</div>
                          </td>
                        ))}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </Card>
          </div>

          {/* Additional Services */}
          <div className="mb-16">
            <Card className="p-8">
              <h2 className="text-2xl font-bold text-neutral-900 mb-8 text-center">
                D·ªãch V·ª• B·ªï Sung
              </h2>
              
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="p-4 border border-neutral-200 rounded-lg">
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="text-2xl">üöö</span>
                    <h3 className="font-semibold text-neutral-900">Chuy·ªÉn nh√†</h3>
                  </div>
                  <p className="text-sm text-neutral-600 mb-3">
                    D·ªãch v·ª• chuy·ªÉn nh√† tr·ªçn g√≥i, ƒë√≥ng g√≥i v√† v·∫≠n chuy·ªÉn
                  </p>
                  <div className="text-lg font-bold text-primary-600">
                    T·ª´ 500.000ƒë
                  </div>
                </div>

                <div className="p-4 border border-neutral-200 rounded-lg">
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="text-2xl">üåø</span>
                    <h3 className="font-semibold text-neutral-900">ChƒÉm s√≥c c√¢y c·∫£nh</h3>
                  </div>
                  <p className="text-sm text-neutral-600 mb-3">
                    T∆∞·ªõi n∆∞·ªõc, c·∫Øt t·ªâa, chƒÉm s√≥c c√¢y c·∫£nh trong nh√†
                  </p>
                  <div className="text-lg font-bold text-primary-600">
                    T·ª´ 80.000ƒë
                  </div>
                </div>

                <div className="p-4 border border-neutral-200 rounded-lg">
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="text-2xl">üêï</span>
                    <h3 className="font-semibold text-neutral-900">ChƒÉm s√≥c th√∫ c∆∞ng</h3>
                  </div>
                  <p className="text-sm text-neutral-600 mb-3">
                    ChƒÉm s√≥c, d·∫Øt ch√≥ m√®o, v·ªá sinh chu·ªìng tr·∫°i
                  </p>
                  <div className="text-lg font-bold text-primary-600">
                    T·ª´ 120.000ƒë
                  </div>
                </div>
              </div>
            </Card>
          </div>

          {/* CTA Section */}
          <div className="text-center">
            <Card className="p-8 bg-gradient-to-r from-primary-600 to-secondary-600 text-white">
              <h2 className="text-3xl font-bold mb-4">
                C·∫ßn T∆∞ V·∫•n Th√™m?
              </h2>
              <p className="text-xl mb-8 opacity-90">
                ƒê·ªôi ng≈© chuy√™n vi√™n c·ªßa ch√∫ng t√¥i s·∫µn s√†ng t∆∞ v·∫•n v√† h·ªó tr·ª£ b·∫°n ch·ªçn d·ªãch v·ª• ph√π h·ª£p nh·∫•t
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button 
                  variant="secondary" 
                  size="lg"
                  onClick={handleConsultation}
                >
                  Li√™n h·ªá t∆∞ v·∫•n
                </Button>
                <Button 
                  variant="outline" 
                  size="lg" 
                  className="border-white text-white hover:bg-white hover:text-primary-600"
                  onClick={() => navigate('/booking')}
                >
                  ƒê·∫∑t d·ªãch v·ª• ngay
                </Button>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PricingPage; 