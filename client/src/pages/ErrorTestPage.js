import React, { useState } from 'react';
import styled from 'styled-components';
import { AlertCircle, CheckCircle, Info, AlertTriangle, Bug, Zap } from 'lucide-react';
import { 
  showUserError, 
  showUserSuccess, 
  createError, 
  ERROR_TYPES, 
  SERVICES 
} from '../services/errorHandler';
import { showToast } from '../components/ToastNotification';
import ToastNotification from '../components/ToastNotification';
import ErrorMessage from '../components/ErrorMessage';

const TestContainer = styled.div`
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
`;

const TestSection = styled.div`
  margin-bottom: 30px;
  padding: 20px;
  border: 1px solid #e5e7eb;
  border-radius: 12px;
  background: white;
`;

const SectionTitle = styled.h2`
  margin: 0 0 20px 0;
  color: #1f2937;
  font-size: 18px;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const TestButton = styled.button`
  margin: 8px;
  padding: 12px 20px;
  border: none;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  
  ${props => {
    switch (props.variant) {
      case 'error':
        return `
          background: #ef4444;
          color: white;
          &:hover { background: #dc2626; }
        `;
      case 'success':
        return `
          background: #10b981;
          color: white;
          &:hover { background: #059669; }
        `;
      case 'warning':
        return `
          background: #f59e0b;
          color: white;
          &:hover { background: #d97706; }
        `;
      case 'info':
        return `
          background: #3b82f6;
          color: white;
          &:hover { background: #2563eb; }
        `;
      default:
        return `
          background: #6b7280;
          color: white;
          &:hover { background: #4b5563; }
        `;
    }
  }}
`;

const ErrorTestPage = () => {
  const [inlineError, setInlineError] = useState('');

  // Test c√°c lo·∫°i l·ªói kh√°c nhau
  const testPaymentError = () => {
    const error = createError(
      ERROR_TYPES.PAYMENT_ERROR,
      SERVICES.PAYMENT,
      'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch'
    );
    showUserError(error);
  };

  const testNetworkError = () => {
    const error = createError(
      ERROR_TYPES.NETWORK_ERROR,
      SERVICES.API_ERROR,
      'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß'
    );
    showUserError(error);
  };

  const testValidationError = () => {
    const error = createError(
      ERROR_TYPES.VALIDATION_ERROR,
      SERVICES.ORDER,
      'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá'
    );
    showUserError(error);
  };

  const testAuthError = () => {
    const error = createError(
      ERROR_TYPES.AUTH_ERROR,
      SERVICES.AUTH,
      'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
    );
    showUserError(error);
  };

  const testServiceUnavailable = () => {
    const error = createError(
      ERROR_TYPES.SERVICE_UNAVAILABLE,
      SERVICES.VIETNAM_ADDRESS,
      'D·ªãch v·ª• t√¨m ki·∫øm ƒë·ªãa ch·ªâ t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
    );
    showUserError(error);
  };

  const testGenericError = () => {
    const error = createError(
      'UNKNOWN_ERROR',
      'UNKNOWN_SERVICE',
      'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh'
    );
    showUserError(error);
  };

  // Test th√¥ng b√°o th√†nh c√¥ng
  const testSuccessMessage = () => {
    showUserSuccess('ƒê·∫∑t d·ªãch v·ª• th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.', 'Thanh to√°n ho√†n t·∫•t');
  };

  const testPaymentSuccess = () => {
    showUserSuccess('Thanh to√°n VNPay th√†nh c√¥ng. M√£ giao d·ªãch: #VNP123456789', 'Thanh to√°n th√†nh c√¥ng');
  };

  // Test toast tr·ª±c ti·∫øp
  const testToastError = () => {
    showToast.error('ƒê√¢y l√† th√¥ng b√°o l·ªói t·ª´ toast utility', 'L·ªói Toast');
  };

  const testToastWarning = () => {
    showToast.warning('C·∫£nh b√°o: D·ªãch v·ª• s·∫Ω b·∫£o tr√¨ trong 30 ph√∫t t·ªõi', 'B·∫£o tr√¨ h·ªá th·ªëng');
  };

  const testToastInfo = () => {
    showToast.info('Th√¥ng tin: Phi√™n b·∫£n m·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', 'C·∫≠p nh·∫≠t h·ªá th·ªëng');
  };

  // Test inline error
  const testInlineError = () => {
    setInlineError('ƒê√¢y l√† th√¥ng b√°o l·ªói hi·ªÉn th·ªã tr·ª±c ti·∫øp tr√™n trang');
  };

  return (
    <TestContainer>
      <h1 style={{ textAlign: 'center', marginBottom: '40px', color: '#1f2937' }}>
        üß™ Error Handling Test Page
      </h1>

      {/* Error Types Tests */}
      <TestSection>
        <SectionTitle>
          <AlertCircle size={20} />
          Test Error Types
        </SectionTitle>
        <TestButton variant="error" onClick={testPaymentError}>
          Payment Error
        </TestButton>
        <TestButton variant="error" onClick={testNetworkError}>
          Network Error
        </TestButton>
        <TestButton variant="error" onClick={testValidationError}>
          Validation Error
        </TestButton>
        <TestButton variant="error" onClick={testAuthError}>
          Auth Error
        </TestButton>
        <TestButton variant="error" onClick={testServiceUnavailable}>
          Service Unavailable
        </TestButton>
        <TestButton variant="error" onClick={testGenericError}>
          Generic Error
        </TestButton>
      </TestSection>

      {/* Success Messages Tests */}
      <TestSection>
        <SectionTitle>
          <CheckCircle size={20} />
          Test Success Messages
        </SectionTitle>
        <TestButton variant="success" onClick={testSuccessMessage}>
          Order Success
        </TestButton>
        <TestButton variant="success" onClick={testPaymentSuccess}>
          Payment Success
        </TestButton>
      </TestSection>

      {/* Toast Utility Tests */}
      <TestSection>
        <SectionTitle>
          <Zap size={20} />
          Test Toast Utilities
        </SectionTitle>
        <TestButton variant="error" onClick={testToastError}>
          Toast Error
        </TestButton>
        <TestButton variant="warning" onClick={testToastWarning}>
          Toast Warning
        </TestButton>
        <TestButton variant="info" onClick={testToastInfo}>
          Toast Info
        </TestButton>
      </TestSection>

      {/* Inline Error Test */}
      <TestSection>
        <SectionTitle>
          <Bug size={20} />
          Test Inline Error
        </SectionTitle>
        <TestButton onClick={testInlineError}>
          Show Inline Error
        </TestButton>
        <TestButton onClick={() => setInlineError('')}>
          Clear Inline Error
        </TestButton>
        
        {inlineError && (
          <ErrorMessage 
            message={inlineError} 
            onClose={() => setInlineError('')}
            show={!!inlineError}
          />
        )}
      </TestSection>

      {/* Toast Notifications */}
      <ToastNotification />
    </TestContainer>
  );
};

export default ErrorTestPage;
