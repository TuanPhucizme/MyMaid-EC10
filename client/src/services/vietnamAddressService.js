// client/src/services/vietnamAddressService.js

// Import error handler
import { createError, ERROR_TYPES, SERVICES, showUserError, logError } from './errorHandler';

// API Base URL - disabled for production to force error handling
const API_BASE_URL = null; // process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

/**
 * L·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë
 * @param {string} search - T·ª´ kh√≥a t√¨m ki·∫øm (optional)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ API
 */
export const getProvinces = async (search = '') => {
  try {
    // Check if API is available
    if (!API_BASE_URL) {
      throw createError(
        ERROR_TYPES.SERVICE_UNAVAILABLE,
        SERVICES.VIETNAM_ADDRESS,
        'D·ªãch v·ª• ƒë·ªãa ch·ªâ Vi·ªát Nam kh√¥ng kh·∫£ d·ª•ng'
      );
    }

    const url = new URL(`${API_BASE_URL}/addresses/provinces`);
    if (search) {
      url.searchParams.append('search', search);
    }

    const response = await fetch(url);
    const data = await response.json();

    if (!response.ok) {
      throw createError(
        ERROR_TYPES.API_ERROR,
        SERVICES.VIETNAM_ADDRESS,
        data.message || 'L·ªói khi l·∫•y danh s√°ch t·ªânh/th√†nh ph·ªë'
      );
    }

    return {
      success: true,
      provinces: data.data,
      total: data.total
    };
  } catch (error) {
    logError(error, 'getProvinces');

    if (error.success === false) {
      // Already formatted error
      return error;
    }

    // Unexpected error
    const formattedError = createError(
      ERROR_TYPES.NETWORK_ERROR,
      SERVICES.VIETNAM_ADDRESS,
      'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• ƒë·ªãa ch·ªâ'
    );

    return formattedError;
  }
};

/**
 * L·∫•y danh s√°ch qu·∫≠n/huy·ªán theo t·ªânh/th√†nh ph·ªë
 * @param {string} provinceId - ID c·ªßa t·ªânh/th√†nh ph·ªë
 * @param {string} search - T·ª´ kh√≥a t√¨m ki·∫øm (optional)
 * @returns {Promise<Object>} - K·∫øt qu·∫£ API
 */
export const getDistricts = async (provinceId, search = '') => {
  try {
    const url = new URL(`${API_BASE_URL}/addresses/districts/${provinceId}`);
    if (search) {
      url.searchParams.append('search', search);
    }

    const response = await fetch(url);
    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || 'L·ªói khi l·∫•y danh s√°ch qu·∫≠n/huy·ªán');
    }

    return {
      success: true,
      districts: data.data,
      total: data.total,
      provinceId: data.provinceId
    };
  } catch (error) {
    console.error('Error fetching districts:', error);
    return {
      success: false,
      message: error.message || 'L·ªói khi l·∫•y danh s√°ch qu·∫≠n/huy·ªán'
    };
  }
};

/**
 * T√¨m ki·∫øm ƒë·ªãa ch·ªâ t·ªïng h·ª£p
 * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
 * @param {number} limit - S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa
 * @returns {Promise<Object>} - K·∫øt qu·∫£ API
 */
export const searchAddresses = async (query, limit = 10) => {
  try {
    if (!query || query.trim().length < 2) {
      return {
        success: true,
        addresses: [],
        total: 0
      };
    }

    // Check if API is available
    if (!API_BASE_URL) {
      // Return mock data for demo purposes
      return {
        success: true,
        addresses: [
          {
            id: 'mock_1',
            name: query.includes('H√† N·ªôi') ? 'H√† N·ªôi' : 'Qu·∫≠n 1',
            fullName: query.includes('H√† N·ªôi') ? 'Th√†nh ph·ªë H√† N·ªôi' : 'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            type: 'district',
            province: { name: query.includes('H√† N·ªôi') ? 'H√† N·ªôi' : 'TP. H·ªì Ch√≠ Minh' }
          }
        ],
        total: 1,
        query: query,
        note: 'D·ªØ li·ªáu demo - d·ªãch v·ª• backend kh√¥ng kh·∫£ d·ª•ng'
      };
    }

    const url = new URL(`${API_BASE_URL}/addresses/search`);
    url.searchParams.append('q', query);
    url.searchParams.append('limit', limit.toString());

    const response = await fetch(url);
    const data = await response.json();

    if (!response.ok) {
      throw createError(
        ERROR_TYPES.API_ERROR,
        SERVICES.VIETNAM_ADDRESS,
        data.message || 'L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ'
      );
    }

    return {
      success: true,
      addresses: data.data,
      total: data.total,
      query: data.query
    };
  } catch (error) {
    logError(error, 'searchAddresses');

    if (error.success === false) {
      return error;
    }

    // Return fallback data instead of error for better UX
    return {
      success: true,
      addresses: [],
      total: 0,
      query: query,
      note: 'D·ªãch v·ª• t√¨m ki·∫øm t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
    };
  }
};

/**
 * L·∫•y g·ª£i √Ω ƒë·ªãa ch·ªâ ph·ªï bi·∫øn
 * @returns {Promise<Object>} - K·∫øt qu·∫£ API
 */
export const getAddressSuggestions = async () => {
  try {
    // Check if API is available
    if (!API_BASE_URL) {
      // Return default popular places
      return {
        success: true,
        suggestions: [
          {
            id: 'default_1',
            name: 'Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh',
            fullName: 'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            type: 'district',
            icon: 'üèõÔ∏è'
          },
          {
            id: 'default_2',
            name: 'Qu·∫≠n Ho√†n Ki·∫øm, H√† N·ªôi',
            fullName: 'Qu·∫≠n Ho√†n Ki·∫øm, Th√†nh ph·ªë H√† N·ªôi',
            type: 'district',
            icon: 'üèõÔ∏è'
          },
          {
            id: 'default_3',
            name: 'S√¢n bay T√¢n S∆°n Nh·∫•t',
            fullName: 'S√¢n bay Qu·ªëc t·∫ø T√¢n S∆°n Nh·∫•t, TP. H·ªì Ch√≠ Minh',
            type: 'poi',
            icon: '‚úàÔ∏è'
          }
        ],
        total: 3,
        note: 'D·ªØ li·ªáu m·∫∑c ƒë·ªãnh - d·ªãch v·ª• backend kh√¥ng kh·∫£ d·ª•ng'
      };
    }

    const response = await fetch(`${API_BASE_URL}/addresses/suggestions`);
    const data = await response.json();

    if (!response.ok) {
      throw createError(
        ERROR_TYPES.API_ERROR,
        SERVICES.VIETNAM_ADDRESS,
        data.message || 'L·ªói khi l·∫•y g·ª£i √Ω ƒë·ªãa ch·ªâ'
      );
    }

    return {
      success: true,
      suggestions: data.data,
      total: data.total
    };
  } catch (error) {
    logError(error, 'getAddressSuggestions');

    // Always return fallback data for suggestions
    return {
      success: true,
      suggestions: [
        {
          id: 'fallback_1',
          name: 'Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh',
          fullName: 'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
          type: 'district',
          icon: 'üèõÔ∏è'
        }
      ],
      total: 1,
      note: 'D·ªØ li·ªáu d·ª± ph√≤ng'
    };
  }
};

/**
 * K·∫øt h·ª£p t√¨m ki·∫øm t·ª´ API Vi·ªát Nam v√† Mapbox
 * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
 * @param {number} limit - S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa
 * @returns {Promise<Object>} - K·∫øt qu·∫£ t·ªïng h·ª£p
 */
export const searchCombinedAddresses = async (query, limit = 8) => {
  try {
    if (!query || query.trim().length < 2) {
      return {
        success: true,
        addresses: [],
        total: 0
      };
    }

    // T√¨m ki·∫øm t·ª´ API Vi·ªát Nam tr∆∞·ªõc
    const vietnamResult = await searchAddresses(query, Math.ceil(limit / 2));
    
    // Import mapboxService dynamically ƒë·ªÉ tr√°nh circular dependency
    const { searchPlaces } = await import('./mapboxService');
    
    // T√¨m ki·∫øm t·ª´ Mapbox
    const mapboxResult = await searchPlaces(query, null, Math.ceil(limit / 2));

    const combinedResults = [];

    // Th√™m k·∫øt qu·∫£ t·ª´ API Vi·ªát Nam
    if (vietnamResult.success && vietnamResult.addresses) {
      vietnamResult.addresses.forEach(address => {
        combinedResults.push({
          ...address,
          source: 'vietnam_api',
          coordinates: null, // S·∫Ω ƒë∆∞·ª£c geocode sau n·∫øu c·∫ßn
          components: {
            province: address.province?.name,
            district: address.name,
            city: address.province?.name
          }
        });
      });
    }

    // Th√™m k·∫øt qu·∫£ t·ª´ Mapbox
    if (mapboxResult.success && mapboxResult.places) {
      mapboxResult.places.forEach(place => {
        // Ki·ªÉm tra tr√πng l·∫∑p d·ª±a tr√™n t√™n
        const isDuplicate = combinedResults.some(existing => 
          existing.name.toLowerCase() === place.name.toLowerCase() ||
          existing.fullName.toLowerCase() === place.fullName.toLowerCase()
        );

        if (!isDuplicate) {
          combinedResults.push({
            ...place,
            source: 'mapbox',
            level: 3 // Mapbox results c√≥ level th·∫•p h∆°n
          });
        }
      });
    }

    // S·∫Øp x·∫øp theo ƒë·ªô li√™n quan v√† source
    const sortedResults = combinedResults
      .sort((a, b) => {
        // ∆Øu ti√™n k·∫øt qu·∫£ t·ª´ API Vi·ªát Nam
        if (a.source === 'vietnam_api' && b.source === 'mapbox') return -1;
        if (a.source === 'mapbox' && b.source === 'vietnam_api') return 1;
        
        // Sau ƒë√≥ s·∫Øp x·∫øp theo relevance
        return (b.relevance || 0) - (a.relevance || 0);
      })
      .slice(0, limit);

    return {
      success: true,
      addresses: sortedResults,
      total: sortedResults.length,
      query,
      sources: {
        vietnam: vietnamResult.success ? vietnamResult.total : 0,
        mapbox: mapboxResult.success ? mapboxResult.places?.length || 0 : 0
      }
    };
  } catch (error) {
    console.error('Error in combined address search:', error);
    return {
      success: false,
      message: error.message || 'L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ'
    };
  }
};

/**
 * Format ƒë·ªãa ch·ªâ Vi·ªát Nam theo chu·∫©n
 * @param {Object} addressData - D·ªØ li·ªáu ƒë·ªãa ch·ªâ
 * @returns {string} - ƒê·ªãa ch·ªâ ƒë√£ format
 */
export const formatVietnameseAddress = (addressData) => {
  const parts = [];
  
  if (addressData.street) parts.push(addressData.street);
  if (addressData.ward) parts.push(addressData.ward);
  if (addressData.district) parts.push(addressData.district);
  if (addressData.province) parts.push(addressData.province);
  
  return parts.join(', ');
};

/**
 * Validate ƒë·ªãa ch·ªâ Vi·ªát Nam
 * @param {string} address - ƒê·ªãa ch·ªâ c·∫ßn validate
 * @returns {Object} - K·∫øt qu·∫£ validation
 */
export const validateVietnameseAddress = (address) => {
  const errors = [];
  
  if (!address || address.trim().length < 5) {
    errors.push('ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±');
  }
  
  // Ki·ªÉm tra c√≥ ch·ª©a √≠t nh·∫•t m·ªôt t·ª´ kh√≥a ƒë·ªãa ch·ªâ Vi·ªát Nam
  const vietnameseKeywords = [
    'qu·∫≠n', 'huy·ªán', 'th√†nh ph·ªë', 't·ªânh', 'ph∆∞·ªùng', 'x√£', 'th·ªã tr·∫•n',
    'ƒë∆∞·ªùng', 'ph·ªë', 'ng√µ', 'h·∫ªm', 's·ªë'
  ];
  
  const hasVietnameseKeyword = vietnameseKeywords.some(keyword => 
    address.toLowerCase().includes(keyword)
  );
  
  if (!hasVietnameseKeyword) {
    errors.push('ƒê·ªãa ch·ªâ n√™n ch·ª©a c√°c t·ª´ kh√≥a ƒë·ªãa ch·ªâ Vi·ªát Nam (qu·∫≠n, huy·ªán, ph∆∞·ªùng, ƒë∆∞·ªùng, v.v.)');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

export default {
  getProvinces,
  getDistricts,
  searchAddresses,
  getAddressSuggestions,
  searchCombinedAddresses,
  formatVietnameseAddress,
  validateVietnameseAddress
};
