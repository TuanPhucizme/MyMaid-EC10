/**
 * Error Handler Service
 * Thay th·∫ø t·∫•t c·∫£ localhost calls b·∫±ng error handling
 */

// Enum cho c√°c lo·∫°i l·ªói
export const ERROR_TYPES = {
  NETWORK_ERROR: 'NETWORK_ERROR',
  API_ERROR: 'API_ERROR',
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  AUTH_ERROR: 'AUTH_ERROR',
  PAYMENT_ERROR: 'PAYMENT_ERROR',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE'
};

// Enum cho c√°c service
export const SERVICES = {
  VIETNAM_ADDRESS: 'VIETNAM_ADDRESS',
  MAPBOX: 'MAPBOX',
  PAYMENT: 'PAYMENT',
  ORDER: 'ORDER',
  AUTH: 'AUTH',
  BOOKING: 'BOOKING'
};

/**
 * T·∫°o error object chu·∫©n
 */
export const createError = (type, service, message, details = null) => {
  return {
    success: false,
    error: {
      type,
      service,
      message,
      details,
      timestamp: new Date().toISOString()
    }
  };
};

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho user
 */
export const showUserError = (error, customMessage = null) => {
  const userMessage = customMessage || getUserFriendlyMessage(error);

  // Log chi ti·∫øt l·ªói cho debugging
  console.error('üö® L·ªói h·ªá th·ªëng:', error);

  // Dispatch custom event ƒë·ªÉ UI components c√≥ th·ªÉ l·∫Øng nghe
  const errorEvent = new CustomEvent('userError', {
    detail: {
      message: userMessage,
      error: error,
      timestamp: new Date().toISOString()
    }
  });
  window.dispatchEvent(errorEvent);

  return userMessage;
};

/**
 * Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng cho user
 */
export const showUserSuccess = (message, title = null) => {
  // Log th√¥ng b√°o th√†nh c√¥ng
  console.log('‚úÖ Th√†nh c√¥ng:', message);

  // Dispatch custom event ƒë·ªÉ UI components c√≥ th·ªÉ l·∫Øng nghe
  const successEvent = new CustomEvent('userSuccess', {
    detail: {
      message: message,
      title: title,
      timestamp: new Date().toISOString()
    }
  });
  window.dispatchEvent(successEvent);

  return message;
};

/**
 * Chuy·ªÉn ƒë·ªïi l·ªói k·ªπ thu·∫≠t th√†nh th√¥ng b√°o th√¢n thi·ªán
 */
export const getUserFriendlyMessage = (error) => {
  if (!error || !error.error) {
    return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau.';
  }

  const { type, service, message } = error.error;

  // N·∫øu c√≥ message c·ª• th·ªÉ t·ª´ backend, ∆∞u ti√™n hi·ªÉn th·ªã message ƒë√≥
  if (message && typeof message === 'string' && message.trim()) {
    // Ki·ªÉm tra n·∫øu message ƒë√£ l√† user-friendly
    if (isUserFriendlyMessage(message)) {
      return message;
    }
  }

  switch (type) {
    case ERROR_TYPES.NETWORK_ERROR:
      return 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.';

    case ERROR_TYPES.API_ERROR:
      switch (service) {
        case SERVICES.VIETNAM_ADDRESS:
          return 'D·ªãch v·ª• t√¨m ki·∫øm ƒë·ªãa ch·ªâ t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ th·ªß c√¥ng.';
        case SERVICES.MAPBOX:
          return 'D·ªãch v·ª• b·∫£n ƒë·ªì t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
        case SERVICES.PAYMENT:
          return message || 'D·ªãch v·ª• thanh to√°n t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ch·ªçn thanh to√°n khi ho√†n th√†nh.';
        case SERVICES.ORDER:
          return message || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
        default:
          return message || 'D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
      }

    case ERROR_TYPES.VALIDATION_ERROR:
      return message || 'Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.';

    case ERROR_TYPES.AUTH_ERROR:
      return message || 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';

    case ERROR_TYPES.PAYMENT_ERROR:
      return message || 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.';

    case ERROR_TYPES.SERVICE_UNAVAILABLE:
      return message || 'D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau.';

    default:
      return message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i sau.';
  }
};

/**
 * Ki·ªÉm tra xem message c√≥ ph·∫£i l√† user-friendly kh√¥ng
 */
const isUserFriendlyMessage = (message) => {
  const technicalKeywords = [
    'error', 'exception', 'null', 'undefined', 'failed', 'timeout',
    'connection', 'server', 'database', 'firebase', 'api', 'http',
    'status', 'code', 'stack', 'trace'
  ];

  const lowerMessage = message.toLowerCase();
  return !technicalKeywords.some(keyword => lowerMessage.includes(keyword));
};

/**
 * Mock API call - thay th·∫ø localhost calls
 */
export const mockApiCall = async (service, endpoint, options = {}) => {
  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 500));
  
  // Simulate different error scenarios
  const errorScenarios = {
    [SERVICES.VIETNAM_ADDRESS]: {
      probability: 0.1, // 10% chance of error
      error: createError(
        ERROR_TYPES.SERVICE_UNAVAILABLE,
        SERVICES.VIETNAM_ADDRESS,
        'Vietnam Address API kh√¥ng kh·∫£ d·ª•ng'
      )
    },
    [SERVICES.MAPBOX]: {
      probability: 0.05, // 5% chance of error
      error: createError(
        ERROR_TYPES.API_ERROR,
        SERVICES.MAPBOX,
        'Mapbox API kh√¥ng kh·∫£ d·ª•ng'
      )
    },
    [SERVICES.PAYMENT]: {
      probability: 0.15, // 15% chance of error
      error: createError(
        ERROR_TYPES.PAYMENT_ERROR,
        SERVICES.PAYMENT,
        'D·ªãch v·ª• thanh to√°n kh√¥ng kh·∫£ d·ª•ng'
      )
    }
  };

  const scenario = errorScenarios[service];
  if (scenario && Math.random() < scenario.probability) {
    throw scenario.error;
  }

  // Return mock success response
  return {
    success: true,
    data: getMockData(service, endpoint),
    message: 'Th√†nh c√¥ng'
  };
};

/**
 * T·∫°o d·ªØ li·ªáu mock cho c√°c service
 */
const getMockData = (service, endpoint) => {
  switch (service) {
    case SERVICES.VIETNAM_ADDRESS:
      return {
        addresses: [
          {
            id: 'mock_1',
            name: 'Qu·∫≠n 1',
            fullName: 'Qu·∫≠n 1, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
            type: 'district',
            province: { name: 'TP. H·ªì Ch√≠ Minh' }
          }
        ],
        total: 1
      };
    
    case SERVICES.PAYMENT:
      return {
        paymentUrl: '#mock-payment-url',
        vnpayOrderId: 'MOCK_' + Date.now(),
        orderDbId: 'mock_order_id'
      };
    
    default:
      return {};
  }
};

/**
 * Wrapper cho fetch v·ªõi error handling
 */
export const safeFetch = async (url, options = {}) => {
  try {
    // Ki·ªÉm tra n·∫øu l√† localhost call
    if (url.includes('localhost') || url.includes('127.0.0.1')) {
      console.warn('üö® Localhost call detected, returning error:', url);
      throw createError(
        ERROR_TYPES.SERVICE_UNAVAILABLE,
        SERVICES.API_ERROR,
        'D·ªãch v·ª• backend kh√¥ng kh·∫£ d·ª•ng trong m√¥i tr∆∞·ªùng production'
      );
    }

    const response = await fetch(url, {
      timeout: 10000, // 10 second timeout
      ...options
    });

    if (!response.ok) {
      throw createError(
        ERROR_TYPES.API_ERROR,
        SERVICES.API_ERROR,
        `HTTP ${response.status}: ${response.statusText}`
      );
    }

    return await response.json();
  } catch (error) {
    if (error.success === false) {
      // Already a formatted error
      throw error;
    }
    
    // Network or other errors
    throw createError(
      ERROR_TYPES.NETWORK_ERROR,
      SERVICES.API_ERROR,
      error.message || 'L·ªói k·∫øt n·ªëi m·∫°ng'
    );
  }
};

/**
 * Log error cho debugging
 */
export const logError = (error, context = '') => {
  const logData = {
    timestamp: new Date().toISOString(),
    context,
    error: error.error || error,
    userAgent: navigator.userAgent,
    url: window.location.href
  };
  
  console.error('üö® Error Log:', logData);
  
  // C√≥ th·ªÉ g·ª≠i l√™n error tracking service nh∆∞ Sentry
  // sendToErrorTracking(logData);
};

export default {
  ERROR_TYPES,
  SERVICES,
  createError,
  showUserError,
  getUserFriendlyMessage,
  mockApiCall,
  safeFetch,
  logError
};
