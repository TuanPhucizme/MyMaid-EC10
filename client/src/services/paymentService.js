/**
 * Payment Service
 * X·ª≠ l√Ω thanh to√°n v·ªõi error handling thay v√¨ localhost calls
 */

import { createError, ERROR_TYPES, SERVICES, showUserError, logError } from './errorHandler';
import { createOrder, updatePaymentInfo, PAYMENT_METHODS } from './firebaseOrderService';

// VNPay configuration (mock for demo)
const VNPAY_CONFIG = {
  tmnCode: '6VGCX6IG',
  returnUrl: window.location.origin + '/payment-result',
  vnpUrl: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html'
};

/**
 * T·∫°o URL thanh to√°n VNPay
 */
export const createVNPayPaymentUrl = async (orderData, userId) => {
  try {
    // T·∫°o ƒë∆°n h√†ng trong Firebase tr∆∞·ªõc
    const orderResult = await createOrder(orderData, userId);
    
    if (!orderResult.success) {
      throw orderResult;
    }

    const { orderId } = orderResult;
    const amount = orderData.payment.amount;

    // Simulate VNPay URL creation (thay th·∫ø localhost call)
    const vnpayOrderId = 'VNP' + Date.now();
    const mockPaymentUrl = `${VNPAY_CONFIG.vnpUrl}?` + new URLSearchParams({
      vnp_Version: '2.1.0',
      vnp_Command: 'pay',
      vnp_TmnCode: VNPAY_CONFIG.tmnCode,
      vnp_Amount: amount * 100,
      vnp_CurrCode: 'VND',
      vnp_TxnRef: vnpayOrderId,
      vnp_OrderInfo: `Thanh toan don hang ${orderId}`,
      vnp_OrderType: 'other',
      vnp_Locale: 'vn',
      vnp_ReturnUrl: VNPAY_CONFIG.returnUrl,
      vnp_CreateDate: new Date().toISOString().replace(/[-:]/g, '').split('.')[0]
    }).toString();

    // L∆∞u th√¥ng tin ƒë·ªÉ tracking
    localStorage.setItem('orderDbId', orderId);
    localStorage.setItem('vnpayOrderId', vnpayOrderId);

    return {
      success: true,
      paymentUrl: mockPaymentUrl,
      vnpayOrderId,
      orderDbId: orderId,
      message: 'T·∫°o URL thanh to√°n th√†nh c√¥ng'
    };

  } catch (error) {
    logError(error, 'createVNPayPaymentUrl');
    
    if (error.success === false) {
      throw error;
    }
    
    throw createError(
      ERROR_TYPES.PAYMENT_ERROR,
      SERVICES.PAYMENT,
      'Kh√¥ng th·ªÉ t·∫°o URL thanh to√°n: ' + error.message
    );
  }
};

/**
 * X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n t·ª´ VNPay
 */
export const processVNPayReturn = async (params) => {
  try {
    const {
      vnp_ResponseCode,
      vnp_TransactionNo,
      vnp_Amount,
      vnp_BankCode,
      vnp_PayDate,
      vnp_TxnRef
    } = params;

    // Ki·ªÉm tra m√£ ph·∫£n h·ªìi
    const isSuccess = vnp_ResponseCode === '00';
    
    if (!isSuccess) {
      const errorMessage = getVNPayErrorMessage(vnp_ResponseCode);
      throw createError(
        ERROR_TYPES.PAYMENT_ERROR,
        SERVICES.PAYMENT,
        errorMessage
      );
    }

    // L·∫•y order ID t·ª´ localStorage
    const orderId = localStorage.getItem('orderDbId');
    if (!orderId) {
      throw createError(
        ERROR_TYPES.VALIDATION_ERROR,
        SERVICES.PAYMENT,
        'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng'
      );
    }

    // C·∫≠p nh·∫≠t th√¥ng tin thanh to√°n trong Firebase
    const paymentData = {
      vnpayTransactionId: vnp_TransactionNo,
      vnpayResponseCode: vnp_ResponseCode,
      vnpayBankCode: vnp_BankCode,
      vnpayPayDate: vnp_PayDate,
      amount: parseInt(vnp_Amount) / 100
    };

    await updatePaymentInfo(orderId, paymentData);

    // Cleanup localStorage
    localStorage.removeItem('orderDbId');
    localStorage.removeItem('vnpayOrderId');
    localStorage.removeItem('bookingDetails');

    return {
      success: true,
      orderId,
      paymentData,
      message: 'Thanh to√°n th√†nh c√¥ng'
    };

  } catch (error) {
    logError(error, 'processVNPayReturn');
    
    if (error.success === false) {
      throw error;
    }
    
    throw createError(
      ERROR_TYPES.PAYMENT_ERROR,
      SERVICES.PAYMENT,
      'L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n: ' + error.message
    );
  }
};

/**
 * X·ª≠ l√Ω thanh to√°n khi ho√†n th√†nh (cash)
 */
export const processCashPayment = async (orderData, userId) => {
  try {
    // T·∫°o ƒë∆°n h√†ng v·ªõi ph∆∞∆°ng th·ª©c thanh to√°n cash
    const cashOrderData = {
      ...orderData,
      payment: {
        ...orderData.payment,
        method: PAYMENT_METHODS.CASH
      }
    };

    const orderResult = await createOrder(cashOrderData, userId);
    
    if (!orderResult.success) {
      throw orderResult;
    }

    // Cleanup localStorage
    localStorage.removeItem('bookingDetails');

    return {
      success: true,
      orderId: orderResult.orderId,
      order: orderResult.order,
      message: 'ƒê·∫∑t d·ªãch v·ª• th√†nh c√¥ng. B·∫°n s·∫Ω thanh to√°n khi ho√†n th√†nh.'
    };

  } catch (error) {
    logError(error, 'processCashPayment');
    
    if (error.success === false) {
      throw error;
    }
    
    throw createError(
      ERROR_TYPES.PAYMENT_ERROR,
      SERVICES.PAYMENT,
      'Kh√¥ng th·ªÉ x·ª≠ l√Ω ƒë·∫∑t d·ªãch v·ª•: ' + error.message
    );
  }
};

/**
 * Chuy·ªÉn ƒë·ªïi m√£ l·ªói VNPay th√†nh th√¥ng b√°o
 */
const getVNPayErrorMessage = (responseCode) => {
  const errorMessages = {
    '01': 'Giao d·ªãch ch∆∞a ho√†n t·∫•t',
    '02': 'Giao d·ªãch b·ªã l·ªói',
    '04': 'Giao d·ªãch ƒë·∫£o (Kh√°ch h√†ng ƒë√£ b·ªã tr·ª´ ti·ªÅn t·∫°i Ng√¢n h√†ng nh∆∞ng GD ch∆∞a th√†nh c√¥ng ·ªü VNPAY)',
    '05': 'VNPAY ƒëang x·ª≠ l√Ω giao d·ªãch n√†y (GD ho√†n ti·ªÅn)',
    '06': 'VNPAY ƒë√£ g·ª≠i y√™u c·∫ßu ho√†n ti·ªÅn sang Ng√¢n h√†ng (GD ho√†n ti·ªÅn)',
    '07': 'Giao d·ªãch b·ªã nghi ng·ªù gian l·∫≠n',
    '09': 'GD Ho√†n tr·∫£ b·ªã t·ª´ ch·ªëi',
    '10': 'ƒê√£ giao h√†ng',
    '11': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP)',
    '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a',
    '13': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP)',
    '24': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch',
    '51': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
    '65': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
    '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
    '79': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
    '99': 'C√°c l·ªói kh√°c (l·ªói c√≤n l·∫°i, kh√¥ng c√≥ trong danh s√°ch m√£ l·ªói ƒë√£ li·ªát k√™)'
  };

  return errorMessages[responseCode] || 'Giao d·ªãch kh√¥ng th√†nh c√¥ng';
};

/**
 * Validate payment data
 */
export const validatePaymentData = (orderData) => {
  const errors = [];

  // Log d·ªØ li·ªáu ƒë·ªÉ debug
  console.log('üîç Validating payment data:', orderData);

  if (!orderData.payment?.amount || orderData.payment.amount <= 0) {
    errors.push('S·ªë ti·ªÅn thanh to√°n kh√¥ng h·ª£p l·ªá');
  }

  if (!orderData.service?.id) {
    errors.push('Th√¥ng tin d·ªãch v·ª• kh√¥ng h·ª£p l·ªá');
  }

  // Ki·ªÉm tra th√¥ng tin li√™n h·ªá chi ti·∫øt h∆°n
  if (!orderData.contact) {
    errors.push('Thi·∫øu th√¥ng tin li√™n h·ªá');
  } else {
    if (!orderData.contact.name || orderData.contact.name.trim() === '') {
      errors.push('H·ªç v√† t√™n l√† b·∫Øt bu·ªôc');
    }
    if (!orderData.contact.phone || orderData.contact.phone.trim() === '') {
      errors.push('S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc');
    }
    if (!orderData.contact.address || orderData.contact.address.trim() === '') {
      errors.push('ƒê·ªãa ch·ªâ l√† b·∫Øt bu·ªôc');
    }
  }

  if (!orderData.schedule?.date || !orderData.schedule?.time) {
    errors.push('Th√¥ng tin l·ªãch h·∫πn kh√¥ng ƒë·∫ßy ƒë·ªß');
  }

  if (errors.length > 0) {
    const detailedMessage = errors.join(', ');
    console.error('‚ùå Validation errors:', errors);

    throw createError(
      ERROR_TYPES.VALIDATION_ERROR,
      SERVICES.PAYMENT,
      detailedMessage
    );
  }

  console.log('‚úÖ Payment data validation passed');
  return true;
};

/**
 * Get payment methods available
 */
export const getAvailablePaymentMethods = () => {
  return [
    {
      id: PAYMENT_METHODS.CASH,
      name: 'Thanh to√°n khi ho√†n th√†nh',
      description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t sau khi ho√†n th√†nh d·ªãch v·ª•',
      icon: 'üíµ',
      available: true
    },
    {
      id: PAYMENT_METHODS.VNPAY,
      name: 'VNPay',
      description: 'Thanh to√°n online qua VNPay (ATM, Visa, MasterCard)',
      icon: 'üí≥',
      available: false, // Disabled due to localhost dependency
      note: 'T·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng'
    }
  ];
};

export default {
  createVNPayPaymentUrl,
  processVNPayReturn,
  processCashPayment,
  validatePaymentData,
  getAvailablePaymentMethods,
  PAYMENT_METHODS
};
